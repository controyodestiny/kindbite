# Generated by Django 5.2.4 on 2025-08-20 09:45

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DietaryTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('color', models.CharField(default='#6B7280', max_length=7)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'dietary_tags',
            },
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Food Categories',
                'db_table': 'food_categories',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('end_user', 'End User'), ('restaurant', 'Restaurant'), ('home_kitchen', 'Home Kitchen'), ('factory', 'Food Factory'), ('supermarket', 'Supermarket'), ('retail', 'Retail Shop'), ('verifier', 'Food Verifier'), ('ambassador', 'Food Ambassador'), ('donor', 'Donor')], default='end_user', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('kind_coins', models.PositiveIntegerField(default=0)),
                ('profile_picture', models.URLField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AIChat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('response', models.TextField()),
                ('is_user_message', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_chats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_chats',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='FoodListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('original_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('discounted_price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('quantity', models.PositiveIntegerField()),
                ('available_quantity', models.PositiveIntegerField()),
                ('unit', models.CharField(default='plates', max_length=20)),
                ('pickup_window_start', models.DateTimeField()),
                ('pickup_window_end', models.DateTimeField()),
                ('pickup_address', models.TextField()),
                ('status', models.CharField(choices=[('available', 'Available'), ('reserved', 'Reserved'), ('claimed', 'Claimed'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='available', max_length=20)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_ratings', models.PositiveIntegerField(default=0)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.foodcategory')),
                ('dietary_tags', models.ManyToManyField(blank=True, to='api.dietarytag')),
            ],
            options={
                'db_table': 'food_listings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EnvironmentalImpact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('co2_saved_kg', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('water_saved_liters', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('packaging_reduced_kg', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('food_miles_cut_km', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('landfill_waste_prevented_kg', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('food_listing', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='environmental_impact', to='api.foodlisting')),
            ],
            options={
                'db_table': 'environmental_impacts',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('reservation_confirmed', 'Reservation Confirmed'), ('reservation_cancelled', 'Reservation Cancelled'), ('new_food_available', 'New Food Available'), ('kind_coins_earned', 'KindCoins Earned'), ('reminder', 'Pickup Reminder'), ('system', 'System Message')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('related_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('related_object_type', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_type', models.CharField(choices=[('restaurant', 'Restaurant'), ('home_kitchen', 'Home Kitchen'), ('factory', 'Food Factory'), ('supermarket', 'Supermarket'), ('retail', 'Retail Shop')], max_length=20)),
                ('business_name', models.CharField(max_length=200)),
                ('business_description', models.TextField(blank=True, null=True)),
                ('business_license', models.CharField(blank=True, max_length=100, null=True)),
                ('business_address', models.TextField()),
                ('business_phone', models.CharField(max_length=15)),
                ('business_email', models.EmailField(max_length=254)),
                ('business_hours', models.JSONField(default=dict)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_ratings', models.PositiveIntegerField(default=0)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='provider_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'providers',
            },
        ),
        migrations.AddField(
            model_name='foodlisting',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_listings', to='api.provider'),
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('picked_up', 'Picked Up'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('pickup_time', models.DateTimeField()),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('kind_coins_earned', models.PositiveIntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('food_listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='api.foodlisting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reservations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('food_listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.foodlisting')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reviews',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'food_listing')},
            },
        ),
        migrations.CreateModel(
            name='UserImpact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('meals_saved', models.PositiveIntegerField(default=0)),
                ('co2_prevented_kg', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('water_saved_liters', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('packaging_reduced_kg', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('food_miles_cut_km', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('kind_coins_earned', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='impact_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_impacts',
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
    ]
