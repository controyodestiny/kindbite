# Generated by Django 5.2.4 on 2025-09-27 09:30

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('emoji', models.CharField(default='üçΩÔ∏è', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Food Category',
                'verbose_name_plural': 'Food Categories',
                'db_table': 'food_categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FoodListing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('restaurant_name', models.CharField(help_text='Name of the restaurant/provider', max_length=200)),
                ('name', models.CharField(help_text='Name of the food item', max_length=200)),
                ('description', models.TextField(help_text='Description of the food item')),
                ('original_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('discounted_price', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('quantity', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('available_quantity', models.PositiveIntegerField(help_text='Remaining quantity available')),
                ('pickup_window_start', models.TimeField(help_text='Pickup window start time')),
                ('pickup_window_end', models.TimeField(help_text='Pickup window end time')),
                ('pickup_date', models.DateField(help_text='Date when food can be picked up')),
                ('location', models.CharField(help_text='Pickup location', max_length=300)),
                ('distance', models.CharField(help_text='Distance from user (calculated dynamically)', max_length=50)),
                ('provider_type', models.CharField(choices=[('restaurant', 'Restaurant'), ('home', 'Home Kitchen'), ('factory', 'Food Factory'), ('supermarket', 'Supermarket'), ('retail', 'Retail Shop')], max_length=20)),
                ('dietary_info', models.JSONField(default=list, help_text='Dietary information (Halal, Vegan, etc.)')),
                ('image_emoji', models.CharField(default='üçΩÔ∏è', help_text='Emoji representation of food', max_length=10)),
                ('co2_saved', models.DecimalField(decimal_places=1, default=0.0, help_text='CO2 saved in kg', max_digits=5)),
                ('status', models.CharField(choices=[('available', 'Available'), ('reserved', 'Reserved'), ('completed', 'Completed'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='available', max_length=20)),
                ('rating', models.DecimalField(decimal_places=1, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('rating_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_listings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Food Listing',
                'verbose_name_plural': 'Food Listings',
                'db_table': 'food_listings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FoodImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('image_url', models.CharField(help_text='URL to food image', max_length=500)),
                ('alt_text', models.CharField(blank=True, max_length=200)),
                ('is_primary', models.BooleanField(default=False)),
                ('food_listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='foods.foodlisting')),
            ],
            options={
                'verbose_name': 'Food Image',
                'verbose_name_plural': 'Food Images',
                'db_table': 'food_images',
            },
        ),
        migrations.CreateModel(
            name='FoodReservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('quantity_reserved', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('picked_up', 'Picked Up'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='pending', max_length=20)),
                ('reserved_at', models.DateTimeField(auto_now_add=True)),
                ('confirmed_at', models.DateTimeField(blank=True, null=True)),
                ('picked_up_at', models.DateTimeField(blank=True, null=True)),
                ('special_instructions', models.TextField(blank=True, help_text='Special instructions from seeker')),
                ('provider_notes', models.TextField(blank=True, help_text='Notes from provider')),
                ('kindcoins_earned', models.PositiveIntegerField(default=0)),
                ('food_listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='foods.foodlisting')),
                ('seeker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_reservations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Food Reservation',
                'verbose_name_plural': 'Food Reservations',
                'db_table': 'food_reservations',
                'ordering': ['-reserved_at'],
            },
        ),
        migrations.CreateModel(
            name='FoodRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('review', models.TextField(blank=True, help_text='Optional review text')),
                ('food_quality', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('pickup_experience', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_for_money', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_verified', models.BooleanField(default=False, help_text='Verified by food verifiers')),
                ('food_listing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='foods.foodlisting')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='food_ratings', to=settings.AUTH_USER_MODEL)),
                ('reservation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='foods.foodreservation')),
            ],
            options={
                'verbose_name': 'Food Rating',
                'verbose_name_plural': 'Food Ratings',
                'db_table': 'food_ratings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='foodlisting',
            index=models.Index(fields=['provider_type', 'status'], name='food_listin_provide_032b02_idx'),
        ),
        migrations.AddIndex(
            model_name='foodlisting',
            index=models.Index(fields=['pickup_date', 'status'], name='food_listin_pickup__2f2fcb_idx'),
        ),
        migrations.AddIndex(
            model_name='foodlisting',
            index=models.Index(fields=['provider', 'status'], name='food_listin_provide_b62718_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='foodreservation',
            unique_together={('food_listing', 'seeker')},
        ),
        migrations.AlterUniqueTogether(
            name='foodrating',
            unique_together={('food_listing', 'reviewer')},
        ),
    ]
